[gd_scene load_steps=9 format=2]

[ext_resource path="res://assets/textures/tree_wallpaper.png" type="Texture" id=1]
[ext_resource path="res://assets/textures/tree_wallpaper2.png" type="Texture" id=3]

[sub_resource type="SpatialMaterial" id=93]
flags_transparent = true
flags_unshaded = true
flags_ensure_correct_normals = true
params_depth_draw_mode = 3
params_line_width = 0.1
albedo_texture = ExtResource( 1 )

[sub_resource type="QuadMesh" id=1]
material = SubResource( 93 )

[sub_resource type="Shader" id=94]
code = "// NOTE: Shader automatically converted from Godot Engine 3.4.stable's SpatialMaterial.

shader_type spatial;
render_mode blend_mix,depth_draw_alpha_prepass,cull_disabled,diffuse_burley,specular_schlick_ggx,unshaded,ensure_correct_normals;
uniform vec4 albedo : hint_color;
uniform sampler2D texture_albedo : hint_albedo;
uniform float specular;
uniform float metallic;
uniform float alpha_scissor_threshold;
uniform float roughness : hint_range(0,1);
uniform float point_size : hint_range(0,128);
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;


void vertex() {
	UV=UV*uv1_scale.xy+uv1_offset.xy;
}




void fragment() {
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	METALLIC = metallic;
	ROUGHNESS = roughness;
	SPECULAR = specular;
	if (alpha_scissor_threshold < albedo.a * albedo_tex.a) {
    	ALPHA = 1.0;
	} else {
    	ALPHA = 0.0;
	}
}
"

[sub_resource type="ShaderMaterial" id=95]
shader = SubResource( 94 )
shader_param/albedo = Color( 1, 1, 1, 1 )
shader_param/specular = 0.5
shader_param/metallic = 0.0
shader_param/alpha_scissor_threshold = 0.9
shader_param/roughness = 1.0
shader_param/point_size = 1.0
shader_param/uv1_scale = Vector3( 1, 1, 1 )
shader_param/uv1_offset = Vector3( 0, 0, 0 )
shader_param/uv2_scale = Vector3( 1, 1, 1 )
shader_param/uv2_offset = Vector3( 0, 0, 0 )
shader_param/texture_albedo = ExtResource( 3 )

[sub_resource type="Shader" id=96]
code = "// NOTE: Shader automatically converted from Godot Engine 3.4.stable's SpatialMaterial.

shader_type spatial;
render_mode blend_mix,depth_draw_alpha_prepass,cull_disabled,diffuse_burley,specular_schlick_ggx,unshaded,ensure_correct_normals;
uniform vec4 albedo : hint_color;
uniform sampler2D texture_albedo : hint_albedo;
uniform float specular;
uniform float metallic;
uniform float alpha_scissor_threshold;
uniform float roughness : hint_range(0,1);
uniform float point_size : hint_range(0,128);
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;


void vertex() {
	UV=UV*uv1_scale.xy+uv1_offset.xy;
}




void fragment() {
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	METALLIC = metallic;
	ROUGHNESS = roughness;
	SPECULAR = specular;
	if (alpha_scissor_threshold < albedo.a * albedo_tex.a) {
	    ALPHA = 1.0;
	} else {
    	ALPHA = 0.0;
	}
}
"

[sub_resource type="ShaderMaterial" id=97]
shader = SubResource( 96 )
shader_param/albedo = Color( 1, 1, 1, 1 )
shader_param/specular = 0.5
shader_param/metallic = 0.0
shader_param/alpha_scissor_threshold = 0.98
shader_param/roughness = 1.0
shader_param/point_size = 1.0
shader_param/uv1_scale = Vector3( 1, 1, 1 )
shader_param/uv1_offset = Vector3( 0, 0, 0 )
shader_param/uv2_scale = Vector3( 1, 1, 1 )
shader_param/uv2_offset = Vector3( 0, 0, 0 )
shader_param/texture_albedo = ExtResource( 1 )

[node name="wallpaper" type="Spatial"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1.93522, 0 )

[node name="MeshInstance2" type="MeshInstance" parent="."]
transform = Transform( 10, 0, 0, 0, 10, 0, 0, 0, 1, -0.0332251, 3.0766, 0.480121 )
mesh = SubResource( 1 )
material/0 = SubResource( 95 )

[node name="MeshInstance3" type="MeshInstance" parent="."]
transform = Transform( 10, 0, 0, 0, 13, 0, 0, 0, 1, 0, 3.54905, -3.6737 )
mesh = SubResource( 1 )
material/0 = SubResource( 97 )
